{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate double integral over rectangle\n",
    "from math import *\n",
    "def double_integral_rectangle(function, lower_x, upper_x, lower_y, upper_y, size_interval):\n",
    "    total_value = 0\n",
    "    for i in range(int((upper_y-lower_y)/size_interval)):\n",
    "        for j in range(int((upper_x-lower_x)/size_interval)):\n",
    "            local_value = function((lower_x + j*size_interval), (lower_y + i*size_interval))*(size_interval**2)\n",
    "            total_value += local_value\n",
    "    return total_value\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.2309847750826926\n"
     ]
    }
   ],
   "source": [
    "def func(x, y):\n",
    "    return exp(-x**2-y**2)\n",
    "z = double_integral_rectangle(func, -1, 1, -1, 1, 0.001)\n",
    "print(z)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate numerical double integral over vertically integrable region\n",
    "#note, any horizontally integrable region can be integrated vertically by interchanging x and y\n",
    "def double_integral_vertical(function, lower_x, upper_x, lower_y, upper_y, size_interval):\n",
    "    total_value = 0\n",
    "    for i in range(int((upper_x-lower_x)/size_interval)):\n",
    "        for j in range(int((upper_y(lower_x+i*size_interval)-lower_y(lower_x+i*size_interval))/size_interval)):\n",
    "            local_value = function((lower_x + i*size_interval), lower_y(lower_x+i*size_interval)+j*size_interval)*(size_interval**2)\n",
    "            total_value += local_value\n",
    "            #if j % 400000 == 0:\n",
    "                #print(total_value*4)\n",
    "    return total_value\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.141590324846167\n"
     ]
    }
   ],
   "source": [
    "#estimate the value of pi\n",
    "def func(x, y):\n",
    "    return 1\n",
    "def upper_y(x):\n",
    "    return (1-x**2)**0.5\n",
    "def lower_y(x):\n",
    "    return 0\n",
    "z = double_integral_vertical(func, 0, 1, lower_y, upper_y, 0.0001)\n",
    "print(4*z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
